@model Models.ItemModel

@{
    ViewBag.Title = "ItemPageCreateList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@Styles.Render(Url.Content("~/Content/item_master.css"))
<style>
    .listTable tr th, td {
        text-align: center;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .operationBtn {
        letter-spacing: 0.1em;
        padding-top: 10px;
    }

    .statusIcon {
        text-align: right;
        letter-spacing: 0.1em;
    }

        .statusIcon p {
            width: 18px;
            text-align: center;
            color: #fff;
            padding: 2px 0px;
            margin: 2px auto;
        }

            .statusIcon p.page:before {
                content: "制";
            }

            .statusIcon p.page {
                background: #F39;
            }

            .statusIcon p.wait1:before {
                content: "待";
            }

            .statusIcon p.wait1 {
                background: #ff0000;
            }

            .statusIcon p.waitL:before {
                content: "期";
            }

            .statusIcon p.waitL {
                background: #f7a300;
            }

            .statusIcon p.exhibit:before {
                content: "中";
            }

            .statusIcon p.exhibit {
                background: #23d134;
            }

            .statusIcon p.ok1:before {
                content: "済";
            }

            .statusIcon p.ok1 {
                background: #00F;
            }

            .statusIcon p.wait:before {
                content: "未";
            }

            .statusIcon p.wait {
                background: #ff0000;
            }

            .statusIcon p.ok:before {
                content: "掲";
            }

            .statusIcon p.ok {
                background: #00F;
            }

            .statusIcon p.del:before {
                content: "削";
            }

            .statusIcon p.del {
                background: #000;
            }

            .statusIcon p.deactive:before {
                content: "無";
            }

            .statusIcon p.deactive {
                background: #c3c3a2;
            }

            .statusIcon p.warehouse:before {
                content: "倉";
            }

            .statusIcon p.warehouse {
                background: #00FFFF;
            }

            .statusIcon p.warehouseerror:before {
                content: "E";
            }

            .statusIcon p.warehouseerror {
                background: #843f5b;
            }

    table.dataTable tbody th, table.dataTable tbody td:nth-child(2){vertical-align: middle;}
    table.dataTable tbody th, table.dataTable tbody td {
        vertical-align: top;
        padding-top: 8px;
    }
</style>

<div id="CmnContents">
    <div id="ComBlock">
        <div class="setListBox inlineSet iconSet iconList">
            <h1>商品情報一覧</h1>
            <div class="itemCmnSetKnr itemCmnSet resetValue searchBox">
                <h2>商品情報一覧検索</h2>
                <div id="Panel1">
                    <table>
                        <tr>
                            <th title="Item Name">商品名</th>
                            <td>
                                @Html.TextBoxFor(x => x.ItemName, new { @tabIndex = 0, onkeydown = "KeyDown(event,this)" })
                            </td>
                            <th title="Item Number">
                                商品番号<br />
                                @Html.CheckBoxFor(x => x.chkiv, new { @tabIndex = 1 })
                            </th>
                            <td>
                                @Html.TextAreaFor(x => x.ItemCD, new { @tabIndex = 2, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Image File Name">画像ファイル名</th>
                            <td>
                                @Html.TextBoxFor(x => x.ImageFileName, new { @tabIndex = 3, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Catalog Information">カタログ情報</th>
                            <td>
                                @Html.TextBoxFor(x => x.CatalogInfo, new { @tabIndex = 4, onkeydown = "KeyDown(event, this)" })
                            </td>
                        </tr>
                        <tr>
                            <th title="Brand Name">ブランド名</th>
                            <td>
                                @Html.TextBoxFor(x => x.BrandName, new { @tabIndex = 5, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Category Name">カテゴリ名</th>
                            <td>
                                @Html.TextBoxFor(x => x.CategoryName, new { @tabIndex = 6, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Competition Name">競技名</th>
                            <td>
                                @Html.TextBoxFor(x => x.CompetitionName, new { @tabIndex = 7, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Color Name">カラー名</th>
                            <td>
                                @Html.TextBoxFor(x => x.ColorName, new { @tabIndex = 8, onkeydown = "KeyDown(event, this)" })
                            </td>
                        </tr>
                        <tr>
                            <th title="Year">年度</th>
                            <td>
                                @Html.TextBoxFor(x => x.YearCD, new { @tabIndex = 9, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="Season">シーズン</th>
                            <td>
                                @Html.TextBoxFor(x => x.SeasonCD, new { @tabIndex = 10, onkeydown = "KeyDown(event, this)" })
                            </td>
                            <th title="SKS Status">SKSステータス</th>
                            <td>
                                @{
                                    var SKSStatus = new List<SelectListItem>();
                                    SKSStatus.Add(new SelectListItem { Text = " ", Value = "0" });
                                    SKSStatus.Add(new SelectListItem { Text = "ページ制作", Value = "1" });
                                    SKSStatus.Add(new SelectListItem { Text = "期日出品待ち", Value = "2" });
                                    SKSStatus.Add(new SelectListItem { Text = "出品待ち", Value = "3" });
                                    SKSStatus.Add(new SelectListItem { Text = "出品済", Value = "4" });
                                }
                                @Html.DropDownListFor(m => m.ItemCD, SKSStatus, new
                                {
                                    @required = "required",
                                    @id = "ddlsksstatus",
                                    @tabindex = "11",
                                    style = "height: 21px"
                                })
                            </td>
                            <th title="Shop Status">ショップ<br />ステータス</th>
                            <td>
                                @{
                                    var ShopStatus = new List<SelectListItem>();
                                    ShopStatus.Add(new SelectListItem { Text = " ", Value = "0" });
                                    ShopStatus.Add(new SelectListItem { Text = "未掲載", Value = "n" });
                                    ShopStatus.Add(new SelectListItem { Text = "掲載中", Value = "u" });
                                    ShopStatus.Add(new SelectListItem { Text = "掲載無", Value = "g" });
                                    ShopStatus.Add(new SelectListItem { Text = "倉庫", Value = "w" });
                                    ShopStatus.Add(new SelectListItem { Text = "エラー", Value = "e" });
                                    ShopStatus.Add(new SelectListItem { Text = "削除", Value = "d" });
                                    ShopStatus.Add(new SelectListItem { Text = "削・無のぞく", Value = "nu" });
                                }
                                @Html.DropDownListFor(m => m.ItemCD, ShopStatus, new
                                {
                                    @required = "required",
                                    @id = "ddlshopstatuss",
                                    @tabindex = "12",
                                    style = "height: 21px"
                                })
                            </td>
                        </tr>
                        <tr>
                            <th title="Special Flag">特記フラグ</th>
                            <td>
                                @Html.DropDownListFor(x => x.SpecialFlagCD, new SelectList(Enumerable.Empty<SelectListItem>(), " ", " "), " ", new { id = "SpecialFlagCD", @tabIndex = 13, onkeydown = "KeyDown(event,this)", style = "height: 21px" })
                            </td>
                            <th title="Reservation Flag">予約フラグ</th>
                            <td>
                                @Html.DropDownListFor(x => x.ReservationFlagCD, new SelectList(Enumerable.Empty<SelectListItem>(), " ", " "), " ", new { id = "ReservationFlagCD", @tabIndex = 14, onkeydown = "KeyDown(event,this)", style = "height: 21px" })
                            </td>
                            <th title="Person in charge">担当者</th>
                            <td>
                                @Html.DropDownListFor(x => x.UserID, new SelectList(Enumerable.Empty<SelectListItem>(), " ", " "), " ", new { id = "UserID", @tabIndex = 15, onkeydown = "KeyDown(event,this)", style = "height: 21px" })
                            </td>
                            <th title="Search Keyword">キーワード検索</th>
                            <td>
                                @Html.TextBoxFor(x => x.SearchKeyword, new { @tabIndex = 16, onkeydown = "KeyDown(event, this)" })
                            </td>
                        </tr>
                    </table>
                    <p>
                        <input type="button" id="btnsearch" value="検 索" />
                    </p>
                </div>
            </div>

            <div class="widthhMax iconEx statusIcon">
                <p class="page"></p>･･･ページ制作
                <p class="wait1"></p>･･･出品待ち
                <p class="waitL"></p>･･･期日出品待ち
                <p class="exhibit"></p>･･･出品中
                <p class="ok1"></p>･･･出品済/
                <p class="wait"></p>･･･未掲載
                <p class="ok"></p>･･･掲載中
                <p class="del"></p>･･･削除
                <p class="deactive"></p>･･･掲載無
                <p class="warehouse"></p>･･･倉庫
                <p class="warehouseerror"></p>･･･.エラー
            </div>

            <div class="widthhMax iconEx operationBtn">
                <p>
                    <input type="button" id="btnselectall" value="全てを選択" />
                </p>
                <p>
                    <input type="button" id="btncancelall" value="全てを解除" />
                </p>
                <p>
                    <input type="button" id="btnexhibition" value="選択商品を出品する" />
                </p>
                <p>
                    <input type="button" id="btnQuickEdit" value="選択商品をクイック編集で表示" />
                </p>
                <p>
                    ダウンロード項目
                    @Html.DropDownListFor(x => x.exportFieldsModel.AutoID, new SelectList(Enumerable.Empty<SelectListItem>(), " ", " "), " ", new { id = "AutoID", @tabIndex = 22, onkeydown = "KeyDown(event,this)" })
                <p>
                    <input type="button" id="btnGenerate" value="エクスポート" ToolTip="Export" />
                </p>
            </div>
        </div>

        <div class="resetValue editBox">
            <table class="listTable" id="tbItemPageCreateList" style="width:100%;">
                <thead>
                    <tr>
                        <th width="3%"></th>
                        <th width="3%"></th>
                        <th>商品番号</th>
                        <th width="100px">商品名</th>
                        <th width="100px">価格</th>
                        <th width="170px">商品画像</th>
                        <th>ショップカテゴリ</th>
                        <th>オプション</th>
                        <th>掲載可能日</th>
                        <th>発売日</th>
                        <th>SKU/ショップ/プレビュー</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <div id="divSKU" style="display:none">
        @Html.Partial("~/Views/Search/SKUView.cshtml")
    </div>
</div>

@section Scripts{
    <script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () { BindItemPageTable(); }, 100);

        BindSpecialFlag();
        BindReservationFlag();
        BindUser();
        BindExportField();

        $("#SKUViewModal").iziModal({
            width: "70%",
            headerColor: "#307D7E",
            overlayClose: false
        });

        $("#btnsearch").click(function () {
            BindItemPageTable();
        });

        $("#btnGenerate").click(function () {
            var res = ErrorCheck('Panel1');
            if (res == "0") {
                if ($("#AutoID").val()) {
                    var obj = {
                        Type: '2',
                        ItemName: $("#ItemName").val(),
                        ItemCD: $("#ItemCD").val(),
                        ImageFileName: $("#ImageFileName").val(),
                        CatalogInfo: $("#CatalogInfo").val(),
                        BrandName: $("#BrandName").val(),
                        CategoryName: $("#CategoryName").val(),
                        CompetitionName: $("#CompetitionName").val(),
                        ColorName: $("#ColorName").val(),
                        YearCD: $("#YearCD").val(),
                        SeasonCD: $("#SeasonCD").val(),
                        SKSStatus: $("#ddlsksstatus").val(),
                        ShopStatus: $("#ddlshopstatuss").val(),
                        SpecialFlagCD: $("#SpecialFlagCD").val(),
                        ReservationFlagCD: $("#ReservationFlagCD").val(),
                        UserID: $("#UserID").val(),
                        SearchKeyword: $("#SearchKeyword").val(),
                        ExportID: $("#AutoID").val(),
                    };
                    var response = CalltoApiController('@Url.Action("ItemPageCreate_List", "api/ItemApi")', obj);
                    var items = JSON.parse(response);

                    var today = new Date();
                    var dd = String(today.getDate()).padStart(2, '0');
                    var mm = String(today.getMonth() + 1).padStart(2, '0');
                    var yyyy = today.getFullYear();

                    today = yyyy + mm + dd;
                    ExportToExcel(items, "商品情報_" + today + ".xlsx", "Sheet1");
                }
                else {
                    ShowMessage("E102");
                }
            }
            else {
                ShowMessage(res);
            }
        });

        function ErrorCheck(e1) {
            var r1;
            var type = [":input[type=text], textarea", "select"];
            for (var i = 0; i < type.length; i++) {
                if (r1 != "0") {
                    $('#' + e1 + ' *').filter(type[i]).each(function () {
                        var result;
                        if (i == 0)
                            result = Err_Chk_Text(this);
                        else
                            result = Err_Chk_Select(this);
                        if (result == "0") {
                            r1 = "0";
                            return false;
                        }
                        else
                            r1 = result;
                    });
                }
            }
            return r1;
        }

        function Err_Chk_Text(ctrl) {
            if (!$(ctrl).val()) {
                return "E111";
            }
            else
                return "0";
        }
        function Err_Chk_Select(ctrl) {
            if ($(ctrl).val() == "0") {
                return "E111";
            }
            else if (!$(ctrl).val()) {
                return "E111";
            }
            else
                return "0";
        }

        $('#tbItemPageCreateList tbody').on('click', 'td.details-control', function () {
            var tr = $(this).closest('tr');
            var row = table.row(tr);

            if (row.child.isShown()) {
                // This row is already open - close it
                row.child.hide();
                tr.removeClass('shown');
            }
            else {
                // Open this row
                row.child(MoreDetail(row.data())).show();
                tr.addClass('shown');
            }
        });

        var oTable = $('#tbItemPageCreateList').dataTable({
            stateSave: true,
            destroy: true,
            "dataSrc": " ",
            "searching": false,
            "ordering": false,
        });

        $("#btnselectall").click(function () {
            oTable.$(".itemchk").prop('checked', true).attr('checked', 'checked');
        });
        $("#btncancelall").click(function () {
            oTable.$(".itemchk").prop('checked', false).attr('checked', false);
        });
    });

    function BindItemPageTable() {
        var obj = {
            Type: '1',
            ItemName: $("#ItemName").val(),
            ItemCD: $("#ItemCD").val(),
            ImageFileName: $("#ImageFileName").val(),
            CatalogInfo: $("#CatalogInfo").val(),
            BrandName: $("#BrandName").val(),
            CategoryName: $("#CategoryName").val(),
            CompetitionName: $("#CompetitionName").val(),
            ColorName: $("#ColorName").val(),
            YearCD: $("#YearCD").val(),
            SeasonCD: $("#SeasonCD").val(),
            SKSStatus: $("#ddlsksstatus").val(),
            ShopStatus: $("#ddlshopstatuss").val(),
            SpecialFlagCD: $("#SpecialFlagCD").val(),
            ReservationFlagCD: $("#ReservationFlagCD").val(),
            UserID: $("#UserID").val(),
            SearchKeyword: $("#SearchKeyword").val(),
            ExportID: $("#AutoID").val(),
        };
        var response = CalltoApiController('@Url.Action("ItemPageCreate_List", "api/ItemApi")', obj);
        
        table = $("#tbItemPageCreateList").DataTable({
            data: JSON.parse(response),
            destroy: true,
            "dataSrc": " ",
            "searching": false,
            "ordering": false,
            //"scrollX": true,
            "createdRow": function (row, data, dataIndex) {
                $(row).addClass("itemchk");
            },
            "columns": [
                {
                    "className": 'details-control',
                    "orderable": false,
                    "data": null,
                    "defaultContent": ''
                },
                {},
                { "data": "ItemCD" },
                { "data": "ItemName" },
                { "data": "ListPrice" },
                { "data": "ItemImage1" },
                { "data": "ShopCategory" },
                { "data": "Option" },
                //{ "data": "Year" },
                //{ "data": "Season" },
                //{ "data": "CatalogInfo" },
                { "data": "PostableDate" },
                { "data": "ReleaseDate" },
                { "data": "TargetShop" },
            ],
            "columnDefs": [
                {
                    "targets": 1,
                    "className": 'itemchk',
                    "data": "",
                    "render": function (data, type, row) {
                        return '<input type="checkbox" class="itemchk" value="' + row.ItemCD + '" >';
                    }
                },
                {
                    "targets": 4,
                    "data": "ListPrice",
                    "className": 'textAlign',
                    "render": function (data, type, row) {
                        return data + '<br/>' + row['SalePrice'] + '<br/>' + row['Cost'] + '<br/>' + row['InterestRate'];
                    }
                },
                {
                    "targets": 5,
                    "data": "",
                    "render": function (data, type, row) {
                        return '<img src="/ItemImages/' + row.ItemImage1 + '" width="50px" height="50px" style="margin-right:3px;" />' +
                            '<img src="/ItemImages/' + row.ItemImage2 + '" width="50px" height="50px" style="margin-right:3px;" />' +
                            '<img src="/ItemImages/' + row.ItemImage3 + '" width="50px" height="50px" />';// +
                            //'<img src="/ItemImages/' + row.ItemImage4 + '" width="50px" height="50px" />' +
                            //'<img src="/ItemImages/' + row.ItemImage5 + '" width="50px" height="50px" />';
                    }
                },
                {
                    "targets": 10,
                    "data": "ItemCD",
                    "render": function (data, type, row) {
                        var jsonData = JSON.parse(row.TargetShop);
                        var $select = $("<select></select>", {
                        });
                        var $option = $("<option></option>", { "text": 'ショップ選択', "value": '0' });
                        $select.append($option);

                        $.each(jsonData, function (x, y) {
                            var keys = Object.keys(y);
                            if (!x) {
                                keys.forEach(function (key) {
                                    if (key != "ItemCD" && y[key] != '') {
                                        var $option = $("<option></option>", { "text": y[key], "value": key });
                                        $select.append($option);
                                    }
                                });
                            }
                        });
                        return '<input type="button" style="width:100px;" onclick="ShowSKUView(\'' + row.ItemCD + '\')" value="SKU別窓表示"> <br / > -------------------------<br/>' +
                            $select.prop("outerHTML") + '<br / > -------------------------<br/><input type="button" style="width:70px;" value="プレビュー">' ;
                    }
                }
            ]
        });
    }

    function BindSpecialFlag() {
        BindDropdown('SpecialFlagCD', 'SpecialFlagCD','SpecialFlagName','@Url.Action("SpecialFlag_Select", "api/ItemApi")');
    }
    function BindReservationFlag() {
        BindDropdown('ReservationFlagCD', 'ReservationFlagCD', 'ReservationFlagName', '@Url.Action("ReservationFlag_Select", "api/ItemApi")');
        $("#ReservationFlagCD").append($('<option></option>').val("0").html("なし"));
    }
    function BindUser() {
        var obj = {
            UserID: null,
        };
        BindDropdown('UserID','UserID','UserName','@Url.Action("User_Select", "api/UserApi")', obj);
    }
    function BindExportField() {
        var obj = {
            ExportType: "01",
        };
        BindDropdown('AutoID', 'AutoID', 'ExportName', '@Url.Action("ExportField_Select", "api/ShopApi")', obj);
    }
        function ShowSKUView(itemCD) {
            $('#divSKU').show();
            BindSKU(itemCD);
            $('#SKUViewModal').iziModal('open');
    }

    function MoreDetail(d) {
            // `d` is the original data object for the row
            return '<table style="margin-left:2%">' +
                '<tr>' +
                '<th>年度</th>' +
                '<th>シーズン</th >' +
                '<th>カタログNO</th>' +
                '</tr>' +
                '<tbody>' +
                '<tr>' +
                '<td>' + d.Year + '</td>' +
                '<td>' + d.Season + '</td>' +
                '<td>' + d.CatalogInfo + '</td>' +
                '</tr>' +
                '</tbody>' +
            '</table>';
        }
    </script>
}

<script type="text/javascript" src="//unpkg.com/xlsx/dist/xlsx.full.min.js"></script>


